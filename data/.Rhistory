c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
n = 100
sd = 100
vs = rnorm(n,mean=0,sd=sd)
ehsd = sqrt(mean((vs-mean(vs))**2))
samples = numeric(100)
for(a in 1:length(samples)){
vs = rnorm(n,mean=0,sd=sd)
#ehsd = sqrt(mean((vs-mean(vs))**2))
ehsd = sd(vs)
samples[a] = ehsd
}
zv = 1.96
c(mean(samples)-zv*sd(samples),mean(samples+zv*(sd(samples))))
mean(100-samples)
pop <- c(21.8,17,15.61,14.63,11.52,8.7,8.14,7.59,6.78,6.68,5.6,5.21,4.32,3.78,3.13,2.87,2.65,2.62,2.41,2.04,2,2.09,1.92,1.82,2.12,1.78,1.75,1.74,1.41,1.59)
sqrt(sqrt(pop))
sqrt(pop)
1/sqrt(pop)
c(1:17)
pop <- c(21.8,17,15.61,14.63,11.52,8.7,8.14,7.59,6.78,6.68,5.6,5.21,4.32,3.78,3.13,2.87,2.65,2.62,2.41,2.04,2,2.09,1.92,1.82,2.12,1.78,1.75,1.74,1.41,1.59)
ind <-c(1:length(pop))
sample(ind,prob = prob)
prob<-1/sqrt(pop)
sample(ind,prob = prob)
sample(1,ind,prob = prob)
sample(ind,1,prob = prob)
pop <- c(21.8,17,15.61,14.63,11.52,8.7,8.14,7.59,6.78,6.68,5.6,5.21,4.32,3.78,3.13,2.87,2.65,2.62,2.41,2.04,2,2.09,1.92,1.82,2.12,1.78,1.75,1.74,1.41,1.59)
ind <-c(1:length(pop))
prob<-1/sqrt(pop)
set.seed(111222333)
sample(ind,1,prob = prob)
pop <- c(21.8,17,15.61,14.63,11.52,8.7,8.14,7.59,6.78,6.68,5.6,5.21,4.32,3.78,3.13,2.87,2.65,2.62,2.41,2.04,2,2.09,1.92,1.82,2.12,1.78,1.75,1.74,1.41,1.59)
ind <-c(1:length(pop))
prob<-1/sqrt(pop)
set.seed(111222333)
sample(ind,1,prob = prob)
pop <- c(21.8,17,15.61,14.63,11.52,8.7,8.14,7.59,6.78,6.68,5.6,5.21,4.32,3.78,3.13,2.87,2.65,2.62,2.41,2.04,2,2.09,1.92,1.82,2.12,1.78,1.75,1.74,1.41,1.59)
ind <-c(1:length(pop))
prob<-1/sqrt(pop)
set.seed(111222333)
sample(ind,1,prob = prob)
pop <- c(21.8,17,15.61,14.63,11.52,8.7,8.14,7.59,6.78,6.68,5.6,5.21,4.32,3.78,3.13,2.87,2.65,2.62,2.41,2.04,2,2.09,1.92,1.82,2.12,1.78,1.75,1.74,1.41,1.59)
ind <-c(1:length(pop))
prob<-1/sqrt(pop)
set.seed(111222333)
sample(ind,1,prob = prob)
pop <- c(21.8,17,15.61,14.63,11.52,8.7,8.14,7.59,6.78,6.68,5.6,5.21,4.32,3.78,3.13,2.87,2.65,2.62,2.41,2.04,2,2.09,1.92,1.82,2.12,1.78,1.75,1.74,1.41,1.59)
ind <-c(1:length(pop))
prob<-1/sqrt(pop)
set.seed(111222333)
sample(ind,1,prob = prob)
set.seed(11122233)
sample(ind,1,prob = prob)
setwd("~/Documents/Projects/JWCL/data")
library(stringi)
overlap_prop = 0.1
d1_prop = 0.5
st_er1 = 0.05
num_people = 1000000
rand_names1 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[A-L]"))
rand_names2 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[A-L]"))
by = as.character(sample(1900:2000,num_people,replace = TRUE))
bm = as.character(sample(1:30,num_people,replace = TRUE))
bd = as.character(sample(1:12,num_people,replace = TRUE))
fn = sample(rand_names1,num_people,replace = TRUE)
ln = sample(rand_names2,num_people,replace = TRUE)
people_overlap = sample(1:num_people,overlap_prop*num_people,replace = FALSE)
not_overlap = which(!1:num_people %in% people_overlap)
people_d1 = sample(not_overlap,d1_prop*length(not_overlap),replace = FALSE)
people_d2 = which(!1:num_people %in% c(people_d1,people_overlap))
df1 = data.frame(fn = fn[c(people_overlap,people_d1)],
ln = ln[c(people_overlap,people_d1)],
by = by[c(people_overlap,people_d1)],
bm = bm[c(people_overlap,people_d1)],
bd = bd[c(people_overlap,people_d1)],
stringsAsFactors = FALSE)
df2 = data.frame(fn = fn[c(people_overlap,people_d2)],
ln = ln[c(people_overlap,people_d2)],
by = by[c(people_overlap,people_d2)],
bm = bm[c(people_overlap,people_d2)],
bd = bd[c(people_overlap,people_d2)],
stringsAsFactors = FALSE)
sum(duplicated(df1))
sum(duplicated(df2))
sum(do.call(paste0, df1) %in% do.call(paste0, df2))
rand_se <- function(s){
doer = ceiling(runif(length(s))*stri_length(s))
substr(s,doer,doer)<-sample(LETTERS,length(s),replace = TRUE)
return(s)
}
noisy_df <- function(df){
for(c in 1:ncol(df)){
er <- which(runif(nrow(df))<st_er1)
df[er,c] <- rand_se(df[er,c])
}
return(df)
}
df1n <- noisy_df(df1)
df1n <- noisy_df(df1n)
df1n <- noisy_df(df1n)
df2n <- noisy_df(df2)
df2n <- noisy_df(df2n)
df2n <- noisy_df(df2n)
sum(do.call(paste0, df1n) %in% do.call(paste0, df2n))/(num_people*overlap_prop)
df1n$is_dupe = FALSE
df1n$is_dupe[1:length(people_overlap)] = TRUE
df2n$is_dupe = FALSE
df2n$is_dupe[1:length(people_overlap)] = TRUE
df1n <- df1n[sample(nrow(df1n)),]
df2n <- df1n[sample(nrow(df2n)),]
write.csv(df1n,file = "artificial_records1.csv")
write.csv(df2n,file = "artificial_records2.csv")
library(stringi)
overlap_prop = 0.1
d1_prop = 0.5
st_er1 = 0.05
num_people = 1000000
rand_names1 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[A-L]"))
rand_names2 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[A-L]"))
by = as.character(sample(1900:2000,num_people,replace = TRUE))
bm = as.character(sample(1:30,num_people,replace = TRUE))
bd = as.character(sample(1:12,num_people,replace = TRUE))
fn = sample(rand_names1,num_people,replace = TRUE)
ln = sample(rand_names2,num_people,replace = TRUE)
people_overlap = sample(1:num_people,overlap_prop*num_people,replace = FALSE)
not_overlap = which(!1:num_people %in% people_overlap)
people_d1 = sample(not_overlap,d1_prop*length(not_overlap),replace = FALSE)
people_d2 = which(!1:num_people %in% c(people_d1,people_overlap))
df1 = data.frame(fn = fn[c(people_overlap,people_d1)],
ln = ln[c(people_overlap,people_d1)],
by = by[c(people_overlap,people_d1)],
bm = bm[c(people_overlap,people_d1)],
bd = bd[c(people_overlap,people_d1)],
stringsAsFactors = FALSE)
df2 = data.frame(fn = fn[c(people_overlap,people_d2)],
ln = ln[c(people_overlap,people_d2)],
by = by[c(people_overlap,people_d2)],
bm = bm[c(people_overlap,people_d2)],
bd = bd[c(people_overlap,people_d2)],
stringsAsFactors = FALSE)
sum(duplicated(df1))
sum(duplicated(df2))
sum(do.call(paste0, df1) %in% do.call(paste0, df2))
rand_se <- function(s){
doer = ceiling(runif(length(s))*stri_length(s))
substr(s,doer,doer)<-sample(LETTERS,length(s),replace = TRUE)
return(s)
}
noisy_df <- function(df){
for(c in 1:ncol(df)){
er <- which(runif(nrow(df))<st_er1)
df[er,c] <- rand_se(df[er,c])
}
return(df)
}
df1n <- noisy_df(df1)
df1n <- noisy_df(df1n)
df1n <- noisy_df(df1n)
df2n <- noisy_df(df2)
df2n <- noisy_df(df2n)
df2n <- noisy_df(df2n)
sum(do.call(paste0, df1n) %in% do.call(paste0, df2n))/(num_people*overlap_prop)
df1n$is_dupe = FALSE
df1n$is_dupe[1:length(people_overlap)] = TRUE
df2n$is_dupe = FALSE
df2n$is_dupe[1:length(people_overlap)] = TRUE
df1n <- df1n[sample(nrow(df1n)),]
df2n <- df1n[sample(nrow(df2n)),]
write.csv(df1n,file = "artificial_records1.csv",row.names = FALSE)
write.csv(df2n,file = "artificial_records2.csv",row.names = FALSE)
library(stringi)
overlap_prop = 0.1
d1_prop = 0.5
st_er1 = 0.05
num_people = 1000000
rand_names1 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[A-M]"))
rand_names2 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[M-Z]"))
by = as.character(sample(1900:2000,num_people,replace = TRUE))
bm = as.character(sample(1:30,num_people,replace = TRUE))
bd = as.character(sample(1:12,num_people,replace = TRUE))
fn = sample(rand_names1,num_people,replace = TRUE)
ln = sample(rand_names2,num_people,replace = TRUE)
people_overlap = sample(1:num_people,overlap_prop*num_people,replace = FALSE)
not_overlap = which(!1:num_people %in% people_overlap)
people_d1 = sample(not_overlap,d1_prop*length(not_overlap),replace = FALSE)
people_d2 = which(!1:num_people %in% c(people_d1,people_overlap))
df1 = data.frame(fn = fn[c(people_overlap,people_d1)],
ln = ln[c(people_overlap,people_d1)],
by = by[c(people_overlap,people_d1)],
bm = bm[c(people_overlap,people_d1)],
bd = bd[c(people_overlap,people_d1)],
stringsAsFactors = FALSE)
df2 = data.frame(fn = fn[c(people_overlap,people_d2)],
ln = ln[c(people_overlap,people_d2)],
by = by[c(people_overlap,people_d2)],
bm = bm[c(people_overlap,people_d2)],
bd = bd[c(people_overlap,people_d2)],
stringsAsFactors = FALSE)
sum(duplicated(df1))
sum(duplicated(df2))
sum(do.call(paste0, df1) %in% do.call(paste0, df2))
rand_se <- function(s){
doer = ceiling(runif(length(s))*stri_length(s))
substr(s,doer,doer)<-sample(LETTERS,length(s),replace = TRUE)
return(s)
}
noisy_df <- function(df){
for(c in 1:ncol(df)){
er <- which(runif(nrow(df))<st_er1)
df[er,c] <- rand_se(df[er,c])
}
return(df)
}
df1n <- noisy_df(df1)
df1n <- noisy_df(df1n)
df1n <- noisy_df(df1n)
df2n <- noisy_df(df2)
df2n <- noisy_df(df2n)
df2n <- noisy_df(df2n)
sum(do.call(paste0, df1n) %in% do.call(paste0, df2n))/(num_people*overlap_prop)
df1n$is_dupe = FALSE
df1n$is_dupe[1:length(people_overlap)] = TRUE
df2n$is_dupe = FALSE
df2n$is_dupe[1:length(people_overlap)] = TRUE
df1n <- df1n[sample(nrow(df1n)),]
df2n <- df1n[sample(nrow(df2n)),]
write.csv(df1n,file = "artificial_records1.csv",row.names = FALSE)
write.csv(df2n,file = "artificial_records2.csv",row.names = FALSE)
library(stringi)
overlap_prop = 0.1
d1_prop = 0.8
st_er1 = 0.05
num_people = 1000000
rand_names1 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[A-M]"))
rand_names2 <- unique(stri_rand_strings(num_people/150, sample(3:9, num_people/150, replace=TRUE),"[M-Z]"))
by = as.character(sample(1900:2000,num_people,replace = TRUE))
bm = as.character(sample(1:30,num_people,replace = TRUE))
bd = as.character(sample(1:12,num_people,replace = TRUE))
fn = sample(rand_names1,num_people,replace = TRUE)
ln = sample(rand_names2,num_people,replace = TRUE)
people_overlap = sample(1:num_people,overlap_prop*num_people,replace = FALSE)
not_overlap = which(!1:num_people %in% people_overlap)
people_d1 = sample(not_overlap,d1_prop*length(not_overlap),replace = FALSE)
people_d2 = which(!1:num_people %in% c(people_d1,people_overlap))
df1 = data.frame(fn = fn[c(people_overlap,people_d1)],
ln = ln[c(people_overlap,people_d1)],
by = by[c(people_overlap,people_d1)],
bm = bm[c(people_overlap,people_d1)],
bd = bd[c(people_overlap,people_d1)],
stringsAsFactors = FALSE)
df2 = data.frame(fn = fn[c(people_overlap,people_d2)],
ln = ln[c(people_overlap,people_d2)],
by = by[c(people_overlap,people_d2)],
bm = bm[c(people_overlap,people_d2)],
bd = bd[c(people_overlap,people_d2)],
stringsAsFactors = FALSE)
sum(duplicated(df1))
sum(duplicated(df2))
sum(do.call(paste0, df1) %in% do.call(paste0, df2))
rand_se <- function(s){
doer = ceiling(runif(length(s))*stri_length(s))
substr(s,doer,doer)<-sample(LETTERS,length(s),replace = TRUE)
return(s)
}
noisy_df <- function(df){
for(c in 1:ncol(df)){
er <- which(runif(nrow(df))<st_er1)
df[er,c] <- rand_se(df[er,c])
}
return(df)
}
df1n <- noisy_df(df1)
df1n <- noisy_df(df1n)
df1n <- noisy_df(df1n)
df2n <- noisy_df(df2)
df2n <- noisy_df(df2n)
df2n <- noisy_df(df2n)
sum(do.call(paste0, df1n) %in% do.call(paste0, df2n))/(num_people*overlap_prop)
df1n$is_dupe = FALSE
df1n$is_dupe[1:length(people_overlap)] = TRUE
df2n$is_dupe = FALSE
df2n$is_dupe[1:length(people_overlap)] = TRUE
df1n <- df1n[sample(nrow(df1n)),]
df2n <- df1n[sample(nrow(df2n)),]
write.csv(df1n,file = "artificial_records1.csv",row.names = FALSE)
write.csv(df2n,file = "artificial_records2.csv",row.names = FALSE)
